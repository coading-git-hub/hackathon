{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "name": "code_hackathon.py",
      # "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/coading-git-hub/hackathon/blob/master/code_hackathon_py.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rzllhnpfxWs1",
        "outputId": "0cc2ab68-489d-43f3-aace-3c26d9708317",
        "cellView": "form"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "‚úÖ All services initialized successfully!\n",
            "Killing any existing ngrok processes...\n",
            "üöÄ Your public URL is: NgrokTunnel: \"https://085b78a3b4d7.ngrok-free.app\" -> \"http://localhost:5000\"\n",
            "------------------------------------------------------------------\n",
            "üëâ Step 1: Copy the public URL above.\n",
            "üëâ Step 2: Paste it into your index.html file where it says 'YOUR_NGROK_URL_HERE'.\n",
            "üëâ Step 3: Open the updated index.html file on your computer.\n",
            "------------------------------------------------------------------\n",
            " * Serving Flask app '__main__'\n"
          ]
        }
      ],
      "source": [
        "#@title 1. Install Dependencies\n",
        "# This cell installs all the required Python packages.\n",
        "!pip install -q flask flask-cors pyngrok openai-whisper groq spotipy requests\n",
        "\n",
        "#@title 2. Import Libraries and Define Functions\n",
        "import os\n",
        "import whisper\n",
        "import requests\n",
        "from groq import Groq\n",
        "import spotipy\n",
        "from spotipy.oauth2 import SpotifyClientCredentials\n",
        "from flask import Flask, request, jsonify\n",
        "from flask_cors import CORS\n",
        "import tempfile\n",
        "from pyngrok import ngrok\n",
        "import threading\n",
        "\n",
        "# --- API Key Configuration ---\n",
        "# Paste your API keys here. In a real app, use Colab Secrets.\n",
        "os.environ[\"GROQ_API_KEY\"] = \"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\"\n",
        "os.environ[\"SPOTIPY_CLIENT_ID\"] = \"a6d45794c9fd47f7b4c9cdd9a0fb6111\"\n",
        "os.environ[\"SPOTIPY_CLIENT_SECRET\"] = \"3783515533234bf3901dcd05536b9119\"\n",
        "TENOR_API_KEY = \"LIVDSRZULELA\"\n",
        "# You will need an ngrok authtoken for longer tunnel durations\n",
        "# Get one from https://dashboard.ngrok.com/get-started/your-authtoken\n",
        "NGROK_AUTH_TOKEN = \"30RrPSkSGqIqfPdmSMHGeO2LfxN_4J99V16yGJDEG3XhgNhkt\" #@param {type:\"string\"}\n",
        "\n",
        "\n",
        "# --- Initialization ---\n",
        "app = Flask(__name__)\n",
        "CORS(app)\n",
        "\n",
        "# --- Service Clients ---\n",
        "try:\n",
        "    groq_client = Groq(api_key=os.environ.get(\"GROQ_API_KEY\"))\n",
        "    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials())\n",
        "    asr_model = whisper.load_model(\"base\")\n",
        "    print(\"‚úÖ All services initialized successfully!\")\n",
        "except Exception as e:\n",
        "    print(f\"‚ùå Error initializing services: {e}\")\n",
        "    groq_client = sp = asr_model = None\n",
        "\n",
        "# --- Core Logic Functions (Copied from your app.py) ---\n",
        "def get_playlist(emotion, lang=\"english\", limit=5):\n",
        "    if not sp: return []\n",
        "    emotion_to_query = {\n",
        "        \"ÿÆŸàÿ¥€å\": \"Pakistani upbeat songs\", \"ÿßÿØÿßÿ≥€å\": \"Pakistani sad songs\", \"ÿ∫ÿµ€Å\": \"Pakistani rock\",\n",
        "        \"ÿ™⁄æ⁄©ÿßŸàŸπ\": \"Pakistani lofi\", \"ÿ¨ÿ∞ÿ®ÿßÿ™€å\": \"Pakistani romantic songs\", \"Ÿæÿ± ÿ≥⁄©ŸàŸÜ\": \"Pakistani sufi music\",\n",
        "        \"happy\": \"feel good\", \"sad\": \"melancholy\", \"angry\": \"hard rock\", \"tired\": \"lofi\",\n",
        "        \"exhausted\": \"ambient\", \"nostalgic\": \"throwback\", \"motivated\": \"upbeat\",\n",
        "        \"demotivated\": \"healing\", \"excited\": \"party\", \"calm\": \"chill\", \"anxious\": \"relaxing\"\n",
        "    }\n",
        "    query = emotion_to_query.get(emotion.strip().lower(), \"chill\")\n",
        "    try:\n",
        "        results = sp.search(q=query, type='track', limit=limit)\n",
        "        return [{\"name\": t['name'], \"artist\": t['artists'][0]['name'], \"url\": t['external_urls']['spotify']} for t in results['tracks']['items']]\n",
        "    except Exception as e:\n",
        "        print(f\"Spotify Error: {e}\")\n",
        "        return []\n",
        "\n",
        "def get_poem(emotion, lang):\n",
        "    if not groq_client: return \"Poem service not available.\"\n",
        "    prompt = (f\"ÿß€å⁄© ÿØŸÑ ⁄©Ÿà ⁄Ü⁄æŸà ŸÑ€åŸÜ€í ŸàÿßŸÑ€å ÿßÿ±ÿØŸà ŸÜÿ∏ŸÖ ŸÑ⁄©⁄æ€å⁄∫ ÿ¨Ÿà Ÿæÿß⁄©ÿ≥ÿ™ÿßŸÜ€å ÿ¥ÿßÿπÿ±€å ⁄©€í ÿßŸÜÿØÿßÿ≤ ŸÖ€å⁄∫ €ÅŸà€î ÿ¨ÿ∞ÿ®€Å: {emotion}\" if lang == \"urdu\"\n",
        "              else f\"Write a short, beautiful, free-verse poem in {lang} inspired by the emotion: {emotion}.\")\n",
        "    try:\n",
        "        response = groq_client.chat.completions.create(model=\"llama-3.1-8b-instant\", messages=[{\"role\": \"user\", \"content\": prompt}])\n",
        "        return response.choices[0].message.content.strip()\n",
        "    except Exception as e:\n",
        "        print(f\"Poem Error: {e}\")\n",
        "        return \"Could not generate a poem.\"\n",
        "\n",
        "def search_tenor_gif(mood):\n",
        "    try:\n",
        "        url = f\"https://g.tenor.com/v1/search?q={mood}&key={TENOR_API_KEY}&limit=1\"\n",
        "        r = requests.get(url)\n",
        "        r.raise_for_status()\n",
        "        return r.json()['results'][0]['media'][0]['gif']['url']\n",
        "    except Exception as e:\n",
        "        print(f\"Tenor Error: {e}\")\n",
        "        return \"https://media.tenor.com/images/0f1b67f2f74bba6d553332b26276a707/tenor.gif\"\n",
        "\n",
        "# --- Main API Endpoint ---\n",
        "@app.route(\"/analyze\", methods=[\"POST\"])\n",
        "def analyze_emotion_endpoint():\n",
        "    if not all([groq_client, sp, asr_model]):\n",
        "        return jsonify({\"error\": \"Backend services not initialized.\"}), 500\n",
        "    if 'audio_file' not in request.files:\n",
        "        return jsonify({\"error\": \"No audio file in request\"}), 400\n",
        "\n",
        "    audio_file = request.files['audio_file']\n",
        "    language = request.form.get('language', 'english')\n",
        "\n",
        "    try:\n",
        "        with tempfile.NamedTemporaryFile(delete=True, suffix=\".wav\") as temp_audio:\n",
        "            audio_file.save(temp_audio.name)\n",
        "            transcribe_result = asr_model.transcribe(temp_audio.name, language=\"ur\" if language == \"urdu\" else \"en\")\n",
        "            text = transcribe_result.get(\"text\", \"\").strip()\n",
        "            if not text: return jsonify({\"error\": \"Could not understand audio.\"}), 400\n",
        "\n",
        "            emotion_list = [\"ÿÆŸàÿ¥€å\", \"ÿßÿØÿßÿ≥€å\", \"ÿ∫ÿµ€Å\", \"ÿ™⁄æ⁄©ÿßŸàŸπ\", \"ÿ¨ÿ∞ÿ®ÿßÿ™€å\", \"Ÿæÿ± ÿ≥⁄©ŸàŸÜ\"] if language == \"urdu\" else \\\n",
        "                           [\"happy\", \"sad\", \"angry\", \"tired\", \"exhausted\", \"nostalgic\", \"motivated\", \"demotivated\", \"excited\", \"calm\", \"anxious\"]\n",
        "            prompt = (f\"From the text, detect the emotion. Choose one from: {emotion_list}.\\n\"\n",
        "                      f\"Text: \\\"{text}\\\"\\nRespond with only the single emotion word.\")\n",
        "            emotion_response = groq_client.chat.completions.create(model=\"llama-3.1-8b-instant\", messages=[{\"role\": \"user\", \"content\": prompt}])\n",
        "            emotion = emotion_response.choices[0].message.content.strip().replace('\"', '').replace('.','')\n",
        "\n",
        "            return jsonify({\n",
        "                \"transcription\": text, \"emotion\": emotion, \"playlist\": get_playlist(emotion, language),\n",
        "                \"poem\": get_poem(emotion, language), \"gif_url\": search_tenor_gif(emotion), \"language\": language\n",
        "            })\n",
        "    except Exception as e:\n",
        "        print(f\"Error during analysis: {e}\")\n",
        "        return jsonify({\"error\": f\"Internal server error: {str(e)}\"}), 500\n",
        "\n",
        "#@title 3. Run the Backend Server\n",
        "# This cell starts the Flask server and creates a public URL with ngrok.\n",
        "\n",
        "# Kill any existing ngrok tunnels to this Colab instance\n",
        "print(\"Killing any existing ngrok processes...\")\n",
        "ngrok.kill()\n",
        "\n",
        "if NGROK_AUTH_TOKEN:\n",
        "    ngrok.set_auth_token(NGROK_AUTH_TOKEN)\n",
        "else:\n",
        "    print(\"‚ö†Ô∏è Ngrok authtoken not found. Tunnel will have a shorter duration.\")\n",
        "    print(\"Get a free token at https://dashboard.ngrok.com/get-started/your-authtoken\")\n",
        "\n",
        "\n",
        "# Open an ngrok tunnel to the Flask app\n",
        "try:\n",
        "    public_url = ngrok.connect(5000)\n",
        "    print(\"üöÄ Your public URL is:\", public_url)\n",
        "    print(\"------------------------------------------------------------------\")\n",
        "    print(\"üëâ Step 1: Copy the public URL above.\")\n",
        "    print(\"üëâ Step 2: Paste it into your index.html file where it says 'YOUR_NGROK_URL_HERE'.\")\n",
        "    print(\"üëâ Step 3: Open the updated index.html file on your computer.\")\n",
        "    print(\"------------------------------------------------------------------\")\n",
        "\n",
        "\n",
        "    # Start the Flask app in a separate thread\n",
        "    threading.Thread(target=app.run, kwargs={\"host\": \"0.0.0.0\", \"port\": 5000}).start()\n",
        "except Exception as e:\n",
        "    print(f\"‚ùå Failed to start ngrok tunnel: {e}\")\n",
        "    print(\"Please make sure you don't have another ngrok agent running.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q flask flask-cors pyngrok openai-whisper groq spotipy requests\n"
      ],
      "metadata": {
        "id": "UMe2SDOUi9qg"
      },
      "execution_count": 6,
      "outputs": []
    }
  ]
}
