# -*- coding: utf-8 -*-
"""code_hackathon.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/coading-git-hub/5b952741380350f1b341650dd408a516/code_hackathon.ipynb
"""

#@title 1. Install Dependencies
# This cell installs all the required Python packages.
!pip install -q flask flask-cors pyngrok openai-whisper groq spotipy requests

#@title 2. Import Libraries and Define Functions
import os
import whisper
import requests
from groq import Groq
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
from flask import Flask, request, jsonify
from flask_cors import CORS
import tempfile
from pyngrok import ngrok
import threading

# --- API Key Configuration ---
# Paste your API keys here. In a real app, use Colab Secrets.
os.environ["GROQ_API_KEY"] = "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"
os.environ["SPOTIPY_CLIENT_ID"] = "a6d45794c9fd47f7b4c9cdd9a0fb6111"
os.environ["SPOTIPY_CLIENT_SECRET"] = "3783515533234bf3901dcd05536b9119"
TENOR_API_KEY = "LIVDSRZULELA"
# You will need an ngrok authtoken for longer tunnel durations
# Get one from https://dashboard.ngrok.com/get-started/your-authtoken
NGROK_AUTH_TOKEN = "30RrPSkSGqIqfPdmSMHGeO2LfxN_4J99V16yGJDEG3XhgNhkt" #@param {type:"string"}


# --- Initialization ---
app = Flask(__name__)
CORS(app)

# --- Service Clients ---
try:
    groq_client = Groq(api_key=os.environ.get("GROQ_API_KEY"))
    sp = spotipy.Spotify(auth_manager=SpotifyClientCredentials())
    asr_model = whisper.load_model("base")
    print("✅ All services initialized successfully!")
except Exception as e:
    print(f"❌ Error initializing services: {e}")
    groq_client = sp = asr_model = None

# --- Core Logic Functions (Copied from your app.py) ---
def get_playlist(emotion, lang="english", limit=5):
    if not sp: return []
    emotion_to_query = {
        "خوشی": "Pakistani upbeat songs", "اداسی": "Pakistani sad songs", "غصہ": "Pakistani rock",
        "تھکاوٹ": "Pakistani lofi", "جذباتی": "Pakistani romantic songs", "پر سکون": "Pakistani sufi music",
        "happy": "feel good", "sad": "melancholy", "angry": "hard rock", "tired": "lofi",
        "exhausted": "ambient", "nostalgic": "throwback", "motivated": "upbeat",
        "demotivated": "healing", "excited": "party", "calm": "chill", "anxious": "relaxing"
    }
    query = emotion_to_query.get(emotion.strip().lower(), "chill")
    try:
        results = sp.search(q=query, type='track', limit=limit)
        return [{"name": t['name'], "artist": t['artists'][0]['name'], "url": t['external_urls']['spotify']} for t in results['tracks']['items']]
    except Exception as e:
        print(f"Spotify Error: {e}")
        return []

def get_poem(emotion, lang):
    if not groq_client: return "Poem service not available."
    prompt = (f"ایک دل کو چھو لینے والی اردو نظم لکھیں جو پاکستانی شاعری کے انداز میں ہو۔ جذبہ: {emotion}" if lang == "urdu"
              else f"Write a short, beautiful, free-verse poem in {lang} inspired by the emotion: {emotion}.")
    try:
        response = groq_client.chat.completions.create(model="llama-3.1-8b-instant", messages=[{"role": "user", "content": prompt}])
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"Poem Error: {e}")
        return "Could not generate a poem."

def search_tenor_gif(mood):
    try:
        url = f"https://g.tenor.com/v1/search?q={mood}&key={TENOR_API_KEY}&limit=1"
        r = requests.get(url)
        r.raise_for_status()
        return r.json()['results'][0]['media'][0]['gif']['url']
    except Exception as e:
        print(f"Tenor Error: {e}")
        return "https://media.tenor.com/images/0f1b67f2f74bba6d553332b26276a707/tenor.gif"

# --- Main API Endpoint ---
@app.route("/analyze", methods=["POST"])
def analyze_emotion_endpoint():
    if not all([groq_client, sp, asr_model]):
        return jsonify({"error": "Backend services not initialized."}), 500
    if 'audio_file' not in request.files:
        return jsonify({"error": "No audio file in request"}), 400

    audio_file = request.files['audio_file']
    language = request.form.get('language', 'english')

    try:
        with tempfile.NamedTemporaryFile(delete=True, suffix=".wav") as temp_audio:
            audio_file.save(temp_audio.name)
            transcribe_result = asr_model.transcribe(temp_audio.name, language="ur" if language == "urdu" else "en")
            text = transcribe_result.get("text", "").strip()
            if not text: return jsonify({"error": "Could not understand audio."}), 400

            emotion_list = ["خوشی", "اداسی", "غصہ", "تھکاوٹ", "جذباتی", "پر سکون"] if language == "urdu" else \
                           ["happy", "sad", "angry", "tired", "exhausted", "nostalgic", "motivated", "demotivated", "excited", "calm", "anxious"]
            prompt = (f"From the text, detect the emotion. Choose one from: {emotion_list}.\n"
                      f"Text: \"{text}\"\nRespond with only the single emotion word.")
            emotion_response = groq_client.chat.completions.create(model="llama-3.1-8b-instant", messages=[{"role": "user", "content": prompt}])
            emotion = emotion_response.choices[0].message.content.strip().replace('"', '').replace('.','')

            return jsonify({
                "transcription": text, "emotion": emotion, "playlist": get_playlist(emotion, language),
                "poem": get_poem(emotion, language), "gif_url": search_tenor_gif(emotion), "language": language
            })
    except Exception as e:
        print(f"Error during analysis: {e}")
        return jsonify({"error": f"Internal server error: {str(e)}"}), 500

#@title 3. Run the Backend Server
# This cell starts the Flask server and creates a public URL with ngrok.

# Kill any existing ngrok tunnels to this Colab instance
print("Killing any existing ngrok processes...")
ngrok.kill()

if NGROK_AUTH_TOKEN:
    ngrok.set_auth_token(NGROK_AUTH_TOKEN)
else:
    print("⚠️ Ngrok authtoken not found. Tunnel will have a shorter duration.")
    print("Get a free token at https://dashboard.ngrok.com/get-started/your-authtoken")


# Open an ngrok tunnel to the Flask app
try:
    public_url = ngrok.connect(5000)
    print("🚀 Your public URL is:", public_url)
    print("------------------------------------------------------------------")
    print("👉 Step 1: Copy the public URL above.")
    print("👉 Step 2: Paste it into your index.html file where it says 'YOUR_NGROK_URL_HERE'.")
    print("👉 Step 3: Open the updated index.html file on your computer.")
    print("------------------------------------------------------------------")


    # Start the Flask app in a separate thread
    threading.Thread(target=app.run, kwargs={"host": "0.0.0.0", "port": 5000}).start()
except Exception as e:
    print(f"❌ Failed to start ngrok tunnel: {e}")
    print("Please make sure you don't have another ngrok agent running.")